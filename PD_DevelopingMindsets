10.  Know the difference between a premature optimization and a show-stopping optimization that NEEDS to happen.

This behavior strikes a nerve because I know that I have often been guilty of doing the opposite.  I am very methodical in my approach to completing tasks and I usually have a very detailed plan to obtain my goals.  However, I am frequently visited by the good-idea fairy before I have an opportunity to complete the task at hand.  As I get deeper into my projects, I begin to visualize improvements to my plan.  This not only distracts me from my current plan, but often results in an overhaul that ultimately was not necessary.  It's something I'm aware of and I simply need to do a better job of analyzing the risks and rewards as these "improvements" pop into my head.

18.  Always review your own code first.

I read this one several times, because I feared that I must have misunderstood the point that the author was trying to make.  The Army is big on checking your work and I have always preached, "check your work, double-check it, then check it again."  I couldn't possibly imagine sharing code for review without thouroughly checking it myself.  I would be embarrassed to ask for someone's time to review a project and later find out they were errors that I could have corrected myself.  I believe that a key to success is developing good relationships and wasting someone's time to go through typo-ridden code is counter-productive in that regard.

24.  Be capable of writing bad code.

This resonates with me in a manner similar to number 10.  I can often become so fixated with minor details that I will waste hours of working on code that that produces very little in the way of features.  An example of this is naming conventions for classes, IDs, or form elements.  As I begin a project, I will use names that are logical and follow a consisten pattern.  Later on in the project, I may come across a situation where it is difficult to follow the established naming convention.  It is easy for me to take a step backwards to refit my existing names to better suit the new ones...all in the name of semantics.

Checklists

Checklists have many benefits.  A good to-do list will help you stay organized by allowing you to remain focused on the task at hand without being distracted with concerns for other tasks.  They're written down so you don't need to worry about forgetting them!  Checklists also make you more productive by ensuring that you don't skip any steps in a process.  By simplifying repetitive tasks in a checklist, you are able to use more brain function and concentration in the tasks that require them.  Finally, checklists are great tools for communicating requirements of peers and subordinates.  A good checklist will specify all the steps required so your teammates know exactly what is needed!
